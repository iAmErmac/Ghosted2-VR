//////////////////////////////////////////////
// -- GHOSTED 2 -- >> Created by RaveYard <<//
// Youtube Channel: MrRaveYard				//
//////////////////////////////////////////////
//G_PLAYER.acs - Player stuff				//
//////////////////////////////////////////////
#include "zcommon.acs"

#import "G_MAIN.acs"
#import "G_MATH.acs"


#library "G_NOISE"

//TODO make the noise less transparent.. this would reduce the need of many layers or much of the cheaper effect while providing decent eye candy :P
//Also the noise is GPU killa!

function void NOISE_Fade(int fad) { fadeto(5,5,5,fad,0.0); }
function void NOISE_Render(int currentnoise,int fade) {
	int i;
	int x = FixedMul(random(0,3)<<16,0.05);
	int y = FixedMul(random(0,3)<<16,0.05);
	if(checkInventory("G2_Festive") == 0) {
		
		setfont("NGRAYS1");
		if(getcvar("G2_GNScale") == 0) {
			sethudsize(0,0,0);
		} else if(getcvar("G2_GNScale") == 2) {
			sethudsize(800,600,0);
			x = floor(random(380.0,420.0));
			y = floor(random(280.0,320.0));
		} else if(getcvar("G2_GNScale") == 1) {
			sethudsize(1600,1200,0);
			x = floor(fixedmul(2.0,random(380.0,420.0)));
			y = floor(fixedmul(2.0,random(280.0,320.0)));
		} else /*if(getcvar("G2_GNScale") == 3)*/ {
			sethudsize(400,300,0);
			x = floor(fixedmul(0.5,random(380.0,420.0)));
			y = floor(fixedmul(0.5,random(280.0,320.0)));
		}
		
		for(i = 0;i < currentnoise;i++) {
			hudmessage(s:"A";HUDMSG_PLAIN, i + 501 ,CR_WHITE,x,y,0.1);
		}
		
	} /*else if(timer() % min(35, 200-(currentnoise/10)) == 0) {
		setfont("NGSNOW1");
		
		int snowamm = currentnoise / 100;
		if(currentnoise > 10) {
			snowamm++;
		}
		
		int t = random(0.1,1.0);

		if(snowamm > (getcvar("G2_GNLimiter")/10))snowamm = getcvar("G2_GNLimiter")/10;
		
		for(i = 0;i < snowamm;i++) {
			x = FixedMul(random(-100,100)<<16,0.001);
			y = FixedMul(random(-100,100)<<16,0.001);
			hudmessage(s:"A";HUDMSG_FADEINOUT, 0 ,CR_WHITE,x,y,t);
			//delay(min(2,random(25,40) - (currentnoise/30)) );
		}
		
		setfont("NGRAYS1");
		
		for(i = 0;i < currentnoise / 2;i++) {
			hudmessage(s:"A";HUDMSG_PLAIN, i + 101 ,CR_WHITE,x,y,1.0);
		}
	}*/

	NOISE_Fade(fade);
	
}

// Calculates "Fadeto"
function int NOISE_CalculateFade(int noise) { int minus = (noise - GetCVar("G2_GNLimiter")); if(noise > GetCVar("G2_GNLimiter")) { return FixedDiv(minus << 16,80.0); } return 0; } 


#define NSCB_DIVIDER 5 //number why which the Calculated basic noise is divided by...

#define NSL_LIMIT 40 //75 //Limit over which the noise gets increased only by every NSL_DIVIDER'th
#define NSL_DIVIDER 4

#define NG_STARTDIST 2048 //Distance from which the ghosts increases your noiselevel.. raising this value might make the max noise larger

//Those are in order of usage.. Basic, Soft limit, Ghost, Limit
function int NOISE_CalculateBasic(int hurtticks) { return (( 100 - GetActorProperty(0,APROP_HEALTH) ) + clamp(0,5,GetCvar("G2_GN")) - (max(0,(100-GetActorProperty(0,APROP_HEALTH)) - hurtticks))) / NSCB_DIVIDER;  }


function int NOISE_SoftLimit(int levelofnoise) { if(levelofnoise > NSL_LIMIT) { return NSL_LIMIT + ( (levelofnoise - NSL_LIMIT) / NSL_DIVIDER); } return levelofnoise; }
//function int NOISE_SoftLimit(int noise) { return noise; }
//function int NOISE_Ghost(int levelofnoise) { if( checkInventory("G2_SawGhost")) { int sub = NG_STARTDIST - ( distance(0,G_GHOSTTAG) * clamp(1,7,GetCvar("G2_GNSight")) ); return max(0,sub) + levelofnoise; } return levelofnoise; }
function int NOISE_Ghost(int levelofnoise) { if( checkInventory("G2_SawGhost")) { return levelofnoise + 10 - clamp(1,7,GetCvar("G2_GNSight")); } return levelofnoise; }
function int NOISE_Limit(int levelofnoise) {  if(levelofnoise > GetCVar("G2_GNLimiter")) { return GetCVar("G2_GNLimiter"); } return levelofnoise; }	// Noise layer limit	

//TODO make the G2_GNsight work in reverse way, as in the higher value, the more noise

#define NI_DIV 5 //Interpolationspeed = Distance / NI_DIV
#define NI_MINIMAL 1 //this is the minimal value incase Interpolationspeed is 0 and there is still some noise

function int NOISE_Interpolate(int currentnoise,int levelofnoise) {
	if(levelofnoise > currentnoise) {
		currentnoise += max(NI_MINIMAL,abs(levelofnoise-currentnoise)/NI_DIV);
	} else if(levelofnoise < currentnoise){
		currentnoise -= max(NI_MINIMAL,abs(levelofnoise-currentnoise)/NI_DIV);
	}
	return currentnoise;
}

