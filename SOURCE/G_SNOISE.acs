//////////////////////////////////////////////
// -- GHOSTED 2 -- >> Created by RaveYard <<//
// Youtube Channel: MrRaveYard				//
//////////////////////////////////////////////
//G_SNOISE.acs - "Super noise"				//
//////////////////////////////////////////////
#include "zcommon.acs"

#import "G_MAIN.acs"
#import "G_SIGHT.acs"
#import "G_NOISE.acs"
#import "G_GHOST.acs"
#import "G_MATH.acs"
#import "G_PAGES.acs"
#import "G_ENGINE.acs"
#import "G_TRACKER.acs"

#library "G_SNOISE"

/* SNOISE VISUALS */

#define HID_SNOISE 1980

script 754 enter clientside { /* "Super Noise" or aka "Glitch" */
	if(isTitlemap()) { terminate; }
	if(consoleplayerNumber() != playernumber()) { terminate; }
	if(PlayerIsBot(PlayerNumber())) { terminate; }
	
	int i,usedcam=0;

	while(GetActorProperty(0,APROP_HEALTH) > 0) {
	
		while(checkInventory("G2_Glitching") == 0) { delay(5); }
		
		int hpdiff = (100 - GetActorProperty(0,APROP_HEALTH)) + (checkInventory("G2_Glitching") * 5);
		int hudx,hudy;
		
		for(i = random(1,min(1,hpdiff / 15));i >= 0;i--) {
			hudx = 450 + (random(-hpdiff,hpdiff)/2);
			hudy = 300 + (random(-hpdiff,hpdiff)/2);
			sethudsize(hudx,hudy,0);
			
			if(GetCvar("G2_SN_DisableDistortions") == 0 && i > 0 && usedcam == 0 && random(0,max(5,(hpdiff / 7) - checkInventory("G2_Glitching"))) == 0) {
				SetCameraToTexture( 0, "SNOICAM", random(120 - (hpdiff / 8),120));
				usedcam = 1;
				setfont("SNOICAM");
				hudmessage(s:"A";HUDMSG_PLAIN,HID_SNOISE+i,CR_WHITE,(hudx/2) << 16,(hudy/2) << 16,0.1);
			} else {
				if(random(0,5) == 0) {
					setfont(strparam(s:"SNOISE",d:random(1,8)));
				} else {
					switch(random(0,2)) {
						case 0: setfont("SNOISE2"); break;
						case 1: setfont("SNOISE4"); break;
						case 2: setfont("SNOISE8"); break;
					}
				}
				hudmessage(s:"A";HUDMSG_PLAIN,HID_SNOISE+i,CR_WHITE,floor(((hudx/2) << 16) + (random(-hpdiff,hpdiff)/8<<16)),floor(((hudy/2) << 16) + (random(-hpdiff,hpdiff)/8<<16)),0.1);
			}
		}
		usedcam = 0;
		delay(pick(1,random(1,getactorproperty(0,APROP_HEALTH)/5)));
	}
}

/* SNOISE sounds */

#define SNOISE_SOUNDCOUNT 18
#define SNOISE_ROTATIONSPEED 100

#define TID_SNSOUND 6460
int SNOISE_INTERMUL[SNOISE_SOUNDCOUNT];
int SNOISE_DISTANCE[SNOISE_SOUNDCOUNT];
int SNOISE_NEXTDISTANCE[SNOISE_SOUNDCOUNT];
int SNOISE_PHASE[SNOISE_SOUNDCOUNT];


/* VOLUME ADJUSTING SCRIPT */


#define SNOISE_INTENSITIES 5

int SNOISE_INTENSITY = 0;
int SNOISE_VOLUME = 0;

int SNOISE_SORTEDNAMES[SNOISE_SOUNDCOUNT] = { //Sounds sorted by increasing tension
	15,
	11,
	9,
	6,
	8,
	7,
	4,
	2,
	12,
	11,
	1,
	5,
	16,
	3,
	13,
	0,
	17,
	14,
};

script 738 (void) net clientside {
	log(s:"SNOISE Mixer enabled");
	
	int graphscaley = 0.3;
	int graphscalex = 15.0;
	
	while(1) {
		
		sethudsize(800,600,0);
		setfont("SMALLFONT");
		
		for(int ai = 0;ai < SNOISE_SOUNDCOUNT;ai++) {
			int i = SNOISE_SORTEDNAMES[ai];
			hudmessage(s:"-";HUDMSG_PLAIN,100+ai,Condition(thingcount(0,i+TID_SNSOUND)>0,CR_GREEN,CR_RED),  350.0 + fixedmul(graphscalex,ai<<16),floor(500.0 -  fixedmul(1200.0 - SNOISE_DISTANCE[i],graphscaley)),0.1);
			hudmessage(s:"X";HUDMSG_PLAIN,100+ai+SNOISE_SOUNDCOUNT,Condition(thingcount(0,i+TID_SNSOUND)>0,CR_BLACK,CR_RED),  350.0 + fixedmul(graphscalex,ai<<16),500.0,0.1);
			hudmessage(s:"-";HUDMSG_PLAIN,100+ai+SNOISE_SOUNDCOUNT+SNOISE_SOUNDCOUNT,Condition(thingcount(0,i+TID_SNSOUND)>0,CR_WHITE,CR_RED),  350.0 + fixedmul(graphscalex,ai<<16),floor(500.0 - fixedmul(1200.0 - SNOISE_NEXTDISTANCE[i],graphscaley)),0.1);
			hudmessage(s:"X";HUDMSG_PLAIN,100+ai+(5*SNOISE_SOUNDCOUNT),Condition(thingcount(0,i+TID_SNSOUND)>0,CR_BLACK,CR_RED),  350.0 + fixedmul(graphscalex,ai<<16),500.0 - fixedmul(1200.0,graphscaley),0.1);
			
			hudmessage(d:i;HUDMSG_PLAIN,100+ai+SNOISE_SOUNDCOUNT+SNOISE_SOUNDCOUNT+SNOISE_SOUNDCOUNT,CR_RED,  350.0 + fixedmul(graphscalex,ai<<16),510.0,0.1);
			hudmessage(d:ai;HUDMSG_PLAIN,100+ai+(4*SNOISE_SOUNDCOUNT),Condition(thingcount(0,ai+TID_SNSOUND)>0,CR_WHITE,CR_RED),  350.0 + fixedmul(graphscalex,ai<<16),520.0,0.1);
			
		}
		
		hudmessage(s:"Volume 0";HUDMSG_PLAIN,98,CR_BLACK,  300.0,500.0,0.1);
		hudmessage(s:"<<>>";HUDMSG_PLAIN,97,CR_GREEN,  300.0,floor(500.0 - (SNOISE_VOLUME<<16)),0.1);
		hudmessage(s:"Volume 127";HUDMSG_PLAIN,99,CR_BLACK,  300.0,500.0-127.0,0.1);
		
		hudmessage(s:"SNSound Intensity 0";HUDMSG_PLAIN,96,CR_BLACK,  150.0,500.0,0.1);
		hudmessage(s:"<<>>";HUDMSG_PLAIN,95,CR_GREEN, 150.0,floor(500.0 - fixedmul(5.0,SNOISE_INTENSITY<<16)),0.1);
		hudmessage(s:"SNSound Intensity 10";HUDMSG_PLAIN,94,CR_BLACK, 150.0,450.0,0.1);
		
		delay(1);
	}

}

#define SNOISE_FADEOUTMUL 0.03
#define SNOISE_FADEINMUL 0.08

function int InterpolateAdd(int a,int to,int by) {
	if(a < to) {
		a+=by; if(a > to) return to;
	} else if(a > to){
		a-=by; if(a < to) return to;
	}
	return a;
}

script 739 enter clientside {
	if(isTitlemap()) { terminate; }
	if(consoleplayerNumber() != playernumber()) { terminate; }
	if(PlayerIsBot(PlayerNumber())) { terminate; }
	delay(1);
	
	int i,r;
	int myvolume;
	int myintensity;
	while(GetActorProperty(0,APROP_HEALTH) > 0) {

		if(checkInventory("G2_UseSNSound") > 0) {
			myvolume = Interpolate(myvolume,min(127,(min(10,checkInventory("G2_UseSNSound"))+min(11,checkInventory("G2_Glitching"))) * 15)<<16,0.25);
			
		} else {
			/*if(SNOISE_VOLUME > 0) {
				SNOISE_VOLUME--;
			}*/
			myvolume = Interpolate(myvolume,0,0.05);
		}
		
		if(checkInventory("G2_Glitching") > 0) {
			//myintensity = Interpolate(myintensity,(SNOISE_SOUNDCOUNT-2)<<16,0.2);
			myintensity = Interpolate(myintensity,clamp(0,SNOISE_SOUNDCOUNT-2,((100-GetActorProperty(0,APROP_HEALTH)) / 8) + (checkInventory("G2_Glitching")))<<16,0.05);
		} else if(SNOISE_INTENSITY > 0) {
			myintensity = Interpolate(myintensity,0,0.005);
		}
		
		SNOISE_INTENSITY = myintensity >> 16;
		SNOISE_VOLUME = myvolume >> 16;

		//Retarded way to do this, but avoids the need to have lines of code
		for(i = 0;i < SNOISE_SOUNDCOUNT;i++)
			SNoise_SetVolume(SNOISE_SORTEDNAMES[i],0,SNOISE_FADEOUTMUL);
		
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY-3)],SNOISE_VOLUME / 4,SNOISE_FADEINMUL);
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY-2)],SNOISE_VOLUME / 3,SNOISE_FADEINMUL);
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY-1)],SNOISE_VOLUME / 2,SNOISE_FADEINMUL);
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY)],SNOISE_VOLUME,SNOISE_FADEINMUL);
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY+1)],SNOISE_VOLUME / 3,SNOISE_FADEINMUL);
		SNoise_SetVolume(SNOISE_SORTEDNAMES[clamp(0,SNOISE_SOUNDCOUNT-1,SNOISE_INTENSITY+2)],SNOISE_VOLUME / 4,SNOISE_FADEINMUL);

		delay(1);
	}
	
	for(i = 0;i < SNOISE_SOUNDCOUNT;i++)
			SNoise_SetVolume(SNOISE_SORTEDNAMES[i],0,0.1);
}

/* LOW LEVEL SNSOUND SCRIPT */

script 740 enter clientside {
	if(isTitlemap()) { terminate; }
	if(consoleplayerNumber() != playernumber()) { terminate; }
	if(PlayerIsBot(PlayerNumber())) { terminate; }
	
	//Initialize sounds!
	int i;
	for(i = 0;i < SNOISE_SOUNDCOUNT;i++) {
		SpawnSpotForced(strparam(s:"G2_Slendersound",d:i+1),0,TID_SNSOUND+i,0);
		SNOISE_DISTANCE[i] = 1200.0;
		SNOISE_NEXTDISTANCE[i] = 1200.0;
		SNOISE_PHASE[i] = fixedmul(fixeddiv(1.0,SNOISE_SOUNDCOUNT<<16),i<<16);
		SNOISE_INTERMUL[i] = 0.5;
		
		if(thingcount(0,TID_SNSOUND+i) == 0) {
			log(s:"Error: Failed to spawn clientside G2_Slendersound",d:i+1,s:" :(");
		}
		
		if(thingcount(0,TID_SNSOUND+i) > 1) {
			log(s:"Error: TID collision for TID: ",d:TID_SNSOUND+i);
		}
	}
	
	if(getcvar("G2_debug") > 0) {
		log(s:"SNOISE: Initialized Sounds");
	}
	
	delay(1);
	
	//Now make em move!
	while(GetActorProperty(0,APROP_HEALTH) > 0) {	
		for(i = 0;i < SNOISE_SOUNDCOUNT;i++) {
			SNOISE_PHASE[i] += SNOISE_ROTATIONSPEED;
			SNOISE_DISTANCE[i] = Interpolate(SNOISE_DISTANCE[i],SNOISE_NEXTDISTANCE[i],SNOISE_INTERMUL[i]);
			if(SNOISE_DISTANCE[i] >= 1190.0) {
				//TODO make a simpler method :)
				if(!SetActorPosition(TID_SNSOUND+i,GetActorX(0) + fixedmul(sin(SNOISE_PHASE[i]),9000.0),GetActorY(0) + fixedmul(cos(SNOISE_PHASE[i]),9000.0),GetActorZ(0),0)) {
					PushActorTo(TID_SNSOUND+i,GetActorX(0) + fixedmul(sin(SNOISE_PHASE[i]),6000.0),GetActorY(0) + fixedmul(cos(SNOISE_PHASE[i]),6000.0),GetActorZ(0),0.5);
				}
			 } else if(!SetActorPosition(TID_SNSOUND+i,GetActorX(0) + fixedmul(sin(SNOISE_PHASE[i]),SNOISE_DISTANCE[i]),GetActorY(0) + fixedmul(cos(SNOISE_PHASE[i]),SNOISE_DISTANCE[i]),GetActorZ(0),0)) {
				PushActorTo(TID_SNSOUND+i,GetActorX(0) + fixedmul(sin(SNOISE_PHASE[i]),SNOISE_DISTANCE[i]),GetActorY(0) + fixedmul(cos(SNOISE_PHASE[i]),SNOISE_DISTANCE[i]),GetActorZ(0),0.5);
			 }
			//setfont("CONFONT");
			//hudmessage(s:"SNOISE_DISTANCE: ",d:i,s:" = ",f:SNOISE_DISTANCE[i];HUDMSG_PLAIN,10+i,CR_WHITE,0.5,0.5+fixedmul(0.02,i<<16),0.1);
		
			
			//	printbold(s:"Stuck!");
			
		}
		//hudmessage(s:"SNOISE_INTENSITY: ",d:SNOISE_INTENSITY,s:" = ",d:SNOISE_VOLUME;HUDMSG_PLAIN,20,CR_WHITE,0.5,0.5+fixedmul(0.02,10.0),0.1);
		
		
		delay(1);
	}
	
	delay(15);
	
	for(i = 0;i < SNOISE_SOUNDCOUNT;i++) {
		Thing_Remove(TID_SNSOUND+i);
	}
	
	if(getcvar("G2_debug") > 0) {
		log(s:"SNOISE: Removed Sounds (death)");
	}
}

script 737 (int p) disconnect clientside {
	if(p != ConsolePlayerNumber()) terminate;
	for(int i = 0;i < SNOISE_SOUNDCOUNT;i++) {
		Thing_Remove(TID_SNSOUND+i);
	}
	
	if(getcvar("G2_debug") > 0) {
		log(s:"SNOISE: Removed Sounds (spectating)");
	}
}

// // THIS FUNCTION SETS THE VOLUME OF GIVEN SOUND BASED ON VOLUME
//#define SNOISE_MINVOLDIST 1200 //1200 Default distance at which sound is unhearable
//#define SNOISE_MAXVOLDIST 200 //200 Default fullvolume... 
//Calculated constants for LinearFunction to determine volume from range 0 to 127
//TODO: recalculate in the future because I accidentaly made the volume 0, be the full volume distance (I added small fix to avoid this error)
#define SNOISE_VFUNC_A 7.874015748031496 //Multiplier 
#define SNOISE_VFUNC_B 200.0 //Add

function void SNoise_SetVolume(int index,int volume,int timemulti) {
	if(timemulti <= 0) timemulti = SNOISE_INTERMUL[index];
	if(index >= 0 && index < SNOISE_SOUNDCOUNT)
		SNOISE_NEXTDISTANCE[index] = LinearFunctionFixed(clamp(0,127,127-volume)<<16,SNOISE_VFUNC_A,SNOISE_VFUNC_B);
		SNOISE_INTERMUL[index] = timemulti;
}