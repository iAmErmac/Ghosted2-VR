class PowerFlashlight : Powerup
{
    Property EnergyType : energyType;               // Light flickers when player is low on this inventory class
    Property FlickerThreshold : flickerThreshold;   // Threshold amount for light flicker
    Property Offset : ofsX, ofsY, ofsZ;             // Beam offset, relative to attack height

    // Beam hotspot properties
    Property SpotColor : spotColor;
    Property SpotRange : spotRange;                 // Note: I think range depends on beam angle, too
    Property SpotInnerAngle : spotInnerAngle;       // Max brightness inside this angle from center
    Property SpotOuterAngle : spotOuterAngle;       // No light outside this angle

    // Spill light properties
    Property SpillColor : spillColor;
    Property SpillRange : spillRange;
    Property SpillInnerAngle : spillInnerAngle;
    Property SpillOuterAngle : spillOuterAngle;

    // Reflected light properties
    Property BounceColor : bounceColor;
    Property BounceRange : bounceRange;             // Note: Range from point of reflection
    Property BounceInnerAngle : bounceInnerAngle;
    Property BounceOuterAngle : bounceOuterAngle;

    Default
    {
        Inventory.MaxAmount 1;
        Powerup.Duration 0x7FFFFFFF;

        PowerFlashlight.EnergyType "BatteryPower";
        PowerFlashlight.FlickerThreshold 3200;
        PowerFlashlight.Offset 1, 0, 0; // ofsX is 1 so player doesn't illuminate themself

        PowerFlashlight.SpotColor 0xffffff;
        PowerFlashlight.SpotRange 1024;
        PowerFlashlight.SpotInnerAngle 6;
        PowerFlashlight.SpotOuterAngle 8;

        PowerFlashlight.SpillColor 0x888888;
        PowerFlashlight.SpillRange 512;
        PowerFlashlight.SpillInnerAngle 12;
        PowerFlashlight.SpillOuterAngle 15;
    }

    class<Ammo> energyType;
    double flickerThreshold;
    double ofsX, ofsY, ofsZ;

    Color spotColor;
    int spotRange;
    double spotInnerAngle;
    double spotOuterAngle;

    Color spillColor;
    int spillRange;
    double spillInnerAngle;
    double spillOuterAngle;

    Color bounceColor;
    int bounceRange;
    double bounceInnerAngle;
    double bounceOuterAngle;

    FlashlightBeam spot;
    FlashlightBeam spill;

    override void AttachToOwner(Actor other)
    {
        Super.AttachToOwner(other);

        spot = FlashlightBeam(Spawn("FlashlightBeam", other.pos));
        spot.master = other;
        spot.offset = (ofsX, ofsY, ofsZ);
        spot.args[0] = spotColor.r;
        spot.args[1] = spotColor.g;
        spot.args[2] = spotColor.b;
        spot.args[3] = spotRange;
        spot.spotInnerAngle = spotInnerAngle;
        spot.spotOuterAngle = spotOuterAngle;

        if (spillRange > 0)
        {
            spill = FlashlightBeam(Spawn("FlashlightBeam", other.pos));
            spill.master = other;
            spill.offset = (ofsX, ofsY, ofsZ);
            spill.args[0] = spillColor.r;
            spill.args[1] = spillColor.g;
            spill.args[2] = spillColor.b;
            spill.args[3] = spillRange;
            spill.spotInnerAngle = spillInnerAngle;
            spill.spotOuterAngle = spillOuterAngle;
        }
    }

    override void DoEffect()
    {
        Super.DoEffect();
		
		if(!owner || !owner.player) return;
		
		let batteryPowerLevel = ""..(owner.CountInv(energyType) * 100 / owner.findinventory(energyType).maxamount);
		let FirstChar = batteryPowerLevel.Left(1);
		let SecondChar = batteryPowerLevel.Mid(1,1);
		owner.SetInventory("BatteryDisplay1", FirstChar.toInt());
		owner.SetInventory("BatteryDisplay2", SecondChar.toInt());
		
		let player = owner.player;
		let pmo = player.mo;
		int hand = player.OffhandWeapon is "Flashlight";
		double angle = pmo.angle;
		double pitch = pmo.AimTarget() ? pmo.BulletSlope(null, ALF_PORTALRESTRICT) : pmo.pitch;
		double dist = 5;
		if(abs(pmo.vel.x) > 2 || abs(pmo.vel.y) > 2 || abs(pmo.vel.z) > 2) dist = 15;
		
		let _puff = pmo.LineAttack(angle, dist, pitch, 0, "melee", "GHDummyPuff1", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | (hand ? LAF_ISOFFHAND : 0));
		
		spot.beamPos = spill.beamPos = _puff.pos;
		spot.hand = spill.hand = hand;

        int energy = energyType ? owner.CountInv(energyType) : effectTics;

        int flicker = Random(0, flickerThreshold);
        if (flicker < 0) flicker *= -ticRate;

        if (flicker > energy)
        {
            spot.args[3] = 0;
            if (spill) spill.args[3] = 0;
        }
        else
        {
            spot.args[3] = spotRange;
            if (spill) spill.args[3] = spillRange;
        }
    }

    override void DetachFromOwner()
    {
        spot.Destroy();
        if (spill) spill.Destroy();
        Super.DetachFromOwner();
    }
}

// Spotlight that follows its master around
class FlashlightBeam : SpotLight
{
    Vector3 offset;
    Vector3 beamPos;
	int hand;

    override void Tick()
    {
        Super.Tick();

        let plyr = PlayerPawn(master);
        //Vector3 beamPos = plyr.AttackPos;
        /*Vector3 beamPos = master.pos;
        beamPos.xy += AngleToVector(master.angle, offset.x);
        beamPos.xy += AngleToVector(master.angle - 90, offset.y);

        let plyr = PlayerPawn(master);
        if (plyr && plyr.player)
        {
            beamPos.z += (plyr.height / 2 + plyr.attackZOffset) * plyr.player.crouchFactor;
        }
        else
        {
            beamPos.z += master.height / 2;
        }*/

        SetOrigin(beamPos, true);

        vel = master.vel;
        //angle = master.angle;
		//pitch = master.pitch;
        angle = (hand ? plyr.OffhandAngle : plyr.AttackAngle) + 90.0;
        pitch = -(hand ? plyr.OffhandPitch : plyr.AttackPitch);
    }
}